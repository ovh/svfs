#!/usr/bin/env ruby

# *****************************************************************************
#  SVFS: The Swift Virtual File System
# *****************************************************************************
#  SVFS allows mounting Swift storage as a file system, using fuse. Check the
#  project homepage for details and limitations to this approach.
# *****************************************************************************
#  @vendor : OVH
# *****************************************************************************

if ENV['PATH'].nil?
  ENV['PATH'] = "/bin:/usr/local/bin"
end

OPTIONS = {
    'allow_other'       => '--allow-other',
    'allow_root'        => '--allow-root',
    'attr'              => '--readdir-base-attributes',
    'auth_url'          => '--os-auth-url',
    'block_size'        => '--block-size',
    'cache_access'      => '--cache-max-access',
    'cache_entries'     => '--cache-max-entries',
    'cache_ttl'         => '--cache-ttl',
    'connect_timeout'   => '--os-connect-timeout',
    'container'         => '--os-container-name',
    'debug'             => '--debug',
    'default_perm'      => '--default-permissions',
    'gid'               => '--default-gid',
    'hubic_auth'        => '--hubic-authorization',
    'hubic_times'       => '--hubic-times',
    'hubic_token'       => '--hubic-refresh-token',
    'ip'                => '--client-ip',
    'mode'              => '--default-mode',
    'password'          => '--os-password',
    'profile_addr'      => '--profile-bind',
    'profile_cpu'       => '--profile-cpu',
    'profile_ram'       => '--profile-ram',
    'readdir'           => '--readdir-concurrency',
    'readahead_size'    => '--readahead-size',
    'region'            => '--os-region-name',
    'domain'            => '--os-domain',
    'request_timeout'   => '--os-request-timeout',
    'ro'                => '--read-only',
    'segment_size'      => '--os-segment-size',
    'storage_policy'    => '--os-storage-policy',
    'storage_url'       => '--os-storage-url',
    'internal_endpoint' => '--os-internal-endpoint',
    'tenant'            => '--os-tenant-name',
    'token'             => '--os-auth-token',
    'transfer_mode'     => '--transfer-mode',
    'uid'               => '--default-uid',
    'username'          => '--os-username',
    'version'           => '--os-auth-version',
    'xattr'             => '--readdir-extended-attributes',
}

if ARGV.length != 2 && (ARGV.length != 4 || ARGV[2] != "-o")
  puts "Usage: #{File.basename($0)} device mountpoint [-o option=value,[option=value]...]\n"
  abort
end

mount_dev     = ARGV[0]
mount_dir     = ARGV[1]
opts          = ARGV[3].nil? ? ['rw'] : ARGV[3].split(',')
extra_prefix  = ""
extra_suffix  = ""

OUTPUTS = {
  "stdout" => 1,
  "stderr" => 2,
}

opts.select! do |o|
  part = o.partition('=')
  opt_key = part.first
  if opt_key == "go_gc"
    extra = "GOGC=#{part.last}"
  end
  if OUTPUTS.has_key?(opt_key)
    extra_suffix += " #{OUTPUTS[opt_key]}#{part.last}"
  end
  if OPTIONS.has_key?(opt_key)
    o[opt_key] = OPTIONS[opt_key]
  end
end

if extra_prefix.empty?
  extra_prefix = "GOGC=60"
end


system("#{extra_prefix} svfs mount --device #{mount_dev} --mountpoint #{mount_dir} #{opts.join(' ')} #{extra_suffix} &")
